'use client';

import { useState, useTransition } from 'react';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Skeleton } from '@/components/ui/skeleton';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Lightbulb, Loader2 } from 'lucide-react';

import type { Student } from '@/lib/types';
import { getAttendanceSummaryAction } from '@/app/actions';

interface AttendanceSummaryGeneratorProps {
  students: Student[];
}

export default function AttendanceSummaryGenerator({
  students,
}: AttendanceSummaryGeneratorProps) {
  const [selectedStudentId, setSelectedStudentId] = useState<string | null>(null);
  const [summary, setSummary] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [isPending, startTransition] = useTransition();

  const handleGenerateSummary = () => {
    if (!selectedStudentId) {
      setError('Please select a student first.');
      return;
    }

    const student = students.find((s) => s.id === selectedStudentId);
    if (!student) {
      setError('Selected student not found.');
      return;
    }

    setError(null);
    setSummary(null);

    startTransition(async () => {
      const result = await getAttendanceSummaryAction({
        studentName: student.name,
        attendanceRecords: student.attendance,
      });

      if (result.success) {
        setSummary(result.summary || null);
      } else {
        setError(result.error || 'An unknown error occurred.');
      }
    });
  };
  
  const selectedStudentName = students.find(s => s.id === selectedStudentId)?.name || 'the student';

  return (
    <Card className="w-full bg-card/50 dark:bg-white/5 border dark:border-white/10 backdrop-blur-lg">
      <CardHeader>
        <CardTitle>AI Attendance Summary</CardTitle>
        <CardDescription>
          Generate a personalized summary of a student&apos;s attendance record.
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="flex flex-col sm:flex-row gap-2">
          <Select onValueChange={setSelectedStudentId} value={selectedStudentId ?? ''}>
            <SelectTrigger className="w-full sm:w-[280px]">
              <SelectValue placeholder="Select a student" />
            </SelectTrigger>
            <SelectContent>
              {students.map((student) => (
                <SelectItem key={student.id} value={student.id}>
                  {student.name}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          <Button onClick={handleGenerateSummary} disabled={isPending || !selectedStudentId}>
            {isPending && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            {isPending ? 'Generating...' : 'Generate Summary'}
          </Button>
        </div>
        {error && (
            <Alert variant="destructive">
                <AlertTitle>Error</AlertTitle>
                <AlertDescription>{error}</AlertDescription>
            </Alert>
        )}
        {(isPending || summary) && (
            <div className="pt-4">
                <h3 className="font-semibold mb-2">Summary for {selectedStudentName}</h3>
                <div className="p-4 border rounded-md bg-background/50 dark:bg-black/20 min-h-[120px]">
                    {isPending ? (
                        <div className="space-y-2">
                            <Skeleton className="h-4 w-full" />
                            <Skeleton className="h-4 w-full" />
                            <Skeleton className="h-4 w-3/4" />
                        </div>
                    ) : (
                        <p className="text-sm text-foreground">{summary}</p>
                    )}
                </div>
            </div>
        )}
      </CardContent>
      <CardFooter>
          <Alert className="bg-transparent border-border/50 dark:border-white/10">
              <Lightbulb className="h-4 w-4" />
              <AlertTitle>Powered by AI</AlertTitle>
              <AlertDescription>
                This summary is generated by an AI model and may not be perfect. Always verify with original records.
              </AlertDescription>
          </Alert>
      </CardFooter>
    </Card>
  );
}
